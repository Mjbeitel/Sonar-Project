
Range.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000aa2  00000b36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aa2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000095  00800110  00800110  00000b46  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ba4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df0  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a06  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000664  00000000  00000000  00002492  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00002af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000523  00000000  00000000  00002d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000068f  00000000  00000000  00003267  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000038f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__ctors_end>
   4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  30:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_12>
  34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_13>
  38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_14>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_15>
  40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  50:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_20>
  54:	0c 94 8b 01 	jmp	0x316	; 0x316 <__vector_21>
  58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  60:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  68:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  6c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  70:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  74:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>

0000007c <__trampolines_end>:
  7c:	45 63       	ori	r20, 0x35	; 53
  7e:	68 6f       	ori	r22, 0xF8	; 248
  80:	20 69       	ori	r18, 0x90	; 144
  82:	73 20       	and	r7, r3
  84:	25 64       	ori	r18, 0x45	; 69
  86:	20 25       	eor	r18, r0
  88:	64 0a       	sbc	r6, r20
  8a:	0a 0d       	add	r16, r10
	...

0000008d <__c.2017>:
  8d:	0a 0d 00                                            ...

00000090 <__c.2011>:
  90:	48 65 6c 6c 6f 0a 0a 0d 00 00                       Hello.....

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e1       	ldi	r29, 0x10	; 16
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
  a6:	11 e0       	ldi	r17, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	e2 ea       	ldi	r30, 0xA2	; 162
  ae:	fa e0       	ldi	r31, 0x0A	; 10
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <__do_copy_data+0x10>
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	a0 31       	cpi	r26, 0x10	; 16
  b8:	b1 07       	cpc	r27, r17
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0xc>

000000bc <__do_clear_bss>:
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	a0 e1       	ldi	r26, 0x10	; 16
  c0:	b1 e0       	ldi	r27, 0x01	; 1
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
  c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
  c6:	a5 3a       	cpi	r26, 0xA5	; 165
  c8:	b2 07       	cpc	r27, r18
  ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
  cc:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  d0:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <_exit>

000000d4 <__bad_interrupt>:
  d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <__vector_15>:

/***************************************************************************************
When the echo length is longer than the counter duration, we use an additional byte to 
indicate how many times we reach the maximum value. 
***************************************************************************************/
ISR (TIMER1_OVF_vect) {	// For long ECHO's
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
	if(ECHOHighPipe >= 2) {
  e6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <ECHOHighPipe>
  ea:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <ECHOHighPipe+0x1>
  ee:	02 97       	sbiw	r24, 0x02	; 2
  f0:	38 f0       	brcs	.+14     	; 0x100 <__vector_15+0x28>
		TIMSK1 = 0;	// No further interrupts.
  f2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		TCCR1B = 0; // Stop Clock
  f6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		MIP = 0xFF;	// End Measurement
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MIP>
	}
	
	ECHOHighPipe++;	// Add 1 to High byte.
 100:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <ECHOHighPipe>
 104:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <ECHOHighPipe+0x1>
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <ECHOHighPipe+0x1>
 10e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <ECHOHighPipe>
}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <__vector_12>:

/***************************************************************************************
Interrupt service routine called when the input capture pin state is changed
***************************************************************************************/
ISR (TIMER1_CAPT_vect) {	// Start and Stop ECHO measurement;
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	if((TCCR1B & (1<<ICES1)) != 0) { // a rising edge has been detected
 132:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 136:	86 ff       	sbrs	r24, 6
 138:	09 c0       	rjmp	.+18     	; 0x14c <__vector_12+0x2c>
		TCCR1B |= (1<<CS11);	// Start counting with ck/8;
 13a:	e1 e8       	ldi	r30, 0x81	; 129
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	82 60       	ori	r24, 0x02	; 2
 142:	80 83       	st	Z, r24
		TCCR1B &= ~(1<<ICES1);  // Configure Negative Edge Capture for end of echo pulse.
 144:	80 81       	ld	r24, Z
 146:	8f 7b       	andi	r24, 0xBF	; 191
 148:	80 83       	st	Z, r24
 14a:	15 c0       	rjmp	.+42     	; 0x176 <__vector_12+0x56>
	}
	
	else {						// a falling edge has been detected
		ECHOLow = TCNT1;
 14c:	e4 e8       	ldi	r30, 0x84	; 132
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	91 81       	ldd	r25, Z+1	; 0x01
 154:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <ECHOLow+0x1>
 158:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <ECHOLow>
		ECHOHigh = ECHOHighPipe;
 15c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <ECHOHighPipe>
 160:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <ECHOHighPipe+0x1>
 164:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <ECHOHigh+0x1>
 168:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ECHOHigh>
		TIMSK1 = (1<<OCIE1B);	// Enables the Compare B interrupt for POST Trigger Delay: Approx 10mS
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
		TCNT1 = 0;
 172:	11 82       	std	Z+1, r1	; 0x01
 174:	10 82       	st	Z, r1
	}
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_14>:


/***************************************************************************************
Interrupt service routine called when the counter 1 has reached the compare value
***************************************************************************************/
ISR (TIMER1_COMPB_vect) {	// Compare B: Post ECHO delay 10mS
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1



	MIP = 0;	// End Measurement
 192:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <MIP>
}
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_13>:

/***************************************************************************************
Interrupt service routine called when the counter 1 has reached the compare value
***************************************************************************************/
ISR (TIMER1_COMPA_vect) {	// Compare A : End of Trigger Pulse
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
	PORTB &= ~(1<<PB1);
 1ac:	29 98       	cbi	0x05, 1	; 5
	TIMSK1 = (1<<ICIE1)|(1<<TOIE1); // enables the T/C1 Overflow and Capture interrupt;
 1ae:	81 e2       	ldi	r24, 0x21	; 33
 1b0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR1B = (1<<ICES1);			// Set Positive edge for capture but Don't count yet
 1b4:	80 e4       	ldi	r24, 0x40	; 64
 1b6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>


}
 1ba:	8f 91       	pop	r24
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <Trigger>:

/******************************************************************************
******************************************************************************/
void Trigger( void ) {		// Config Timer 1 for 10 to 15uS pulse.
	if(MIP == 0) {	// Don't allow re-trigger.
 1c6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MIP>
 1ca:	81 11       	cpse	r24, r1
 1cc:	24 c0       	rjmp	.+72     	; 0x216 <Trigger+0x50>
		MIP = 1;				// Set Measurement in progress FLAG
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MIP>
		DDRB |= (1<<PB1);		// PB1 as Output for Trigger pulse.
 1d4:	21 9a       	sbi	0x04, 1	; 4
		DDRD &= ~(1<<PD6);		// PD6 as Input for Input Capture (ECHO).
 1d6:	56 98       	cbi	0x0a, 6	; 10
		
		TCNT1 = 0;				// Clear last Echo times.
 1d8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1dc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
		ECHOHighPipe = 0;
 1e0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <ECHOHighPipe+0x1>
 1e4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <ECHOHighPipe>
		
		OCR1B = 10100;			// 10 mS Post echo Delay
 1e8:	84 e7       	ldi	r24, 0x74	; 116
 1ea:	97 e2       	ldi	r25, 0x27	; 39
 1ec:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1f0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		OCR1A = 12;				// 10 us Trigger length.
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

		PORTB |= (1<<PB1);		// Start Pulse.
 200:	29 9a       	sbi	0x05, 1	; 5

		TIFR1 = 0xFF;			//  Clear all timer interrupt flags
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	86 bb       	out	0x16, r24	; 22
		TCCR1A = 0;   // Timer mode with Clear Output on Match
 206:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR1B = (1<<WGM12) | (1<<CS11);  // Counting with CKio/8 CTC Mode enabled
 20a:	8a e0       	ldi	r24, 0x0A	; 10
 20c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		TIMSK1 = (1<<OCIE1A);	// enables the T/C1 Overflow, Compare A, and Capture interrupt;
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 216:	08 95       	ret

00000218 <main>:
******************************************************************************/
int main(void){
	
	uint8_t key;
	
    init_uart0(95);
 218:	8f e5       	ldi	r24, 0x5F	; 95
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 65 01 	call	0x2ca	; 0x2ca <init_uart0>

    sei();
 220:	78 94       	sei
	
	fprintf_P(fio_0,PSTR("Hello\n\n\r")	);
 222:	80 e9       	ldi	r24, 0x90	; 144
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	9f 93       	push	r25
 228:	8f 93       	push	r24
 22a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
 22e:	8f 93       	push	r24
 230:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 234:	8f 93       	push	r24
 236:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <fprintf_P>
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0

		case 'T':
		case 't':
			Trigger();
			while (MIP == 1){};
			fprintf_P(fio_0,PSTR("Echo is %d %d\n\n\r"),	ECHOHigh, ECHOLow);
 242:	0c e7       	ldi	r16, 0x7C	; 124
 244:	10 e0       	ldi	r17, 0x00	; 0
	
	key = uart0_getc();
	
	switch(key) {
		case 13:
			fprintf_P(fio_0,PSTR("\n\r")	);
 246:	cd e8       	ldi	r28, 0x8D	; 141
 248:	d0 e0       	ldi	r29, 0x00	; 0
    sei();
	
	fprintf_P(fio_0,PSTR("Hello\n\n\r")	);

    while (1 == 1) {
	while(uart0_RxCount() == 0){};
 24a:	0e 94 55 02 	call	0x4aa	; 0x4aa <uart0_RxCount>
 24e:	88 23       	and	r24, r24
 250:	e1 f3       	breq	.-8      	; 0x24a <main+0x32>
	
	key = uart0_getc();
 252:	0e 94 fe 01 	call	0x3fc	; 0x3fc <uart0_getc>
	
	switch(key) {
 256:	84 35       	cpi	r24, 0x54	; 84
 258:	99 f0       	breq	.+38     	; 0x280 <main+0x68>
 25a:	84 37       	cpi	r24, 0x74	; 116
 25c:	89 f0       	breq	.+34     	; 0x280 <main+0x68>
 25e:	8d 30       	cpi	r24, 0x0D	; 13
 260:	a1 f7       	brne	.-24     	; 0x24a <main+0x32>
		case 13:
			fprintf_P(fio_0,PSTR("\n\r")	);
 262:	df 93       	push	r29
 264:	cf 93       	push	r28
 266:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
 26a:	8f 93       	push	r24
 26c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 270:	8f 93       	push	r24
 272:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <fprintf_P>
			break;
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
 27e:	e5 cf       	rjmp	.-54     	; 0x24a <main+0x32>

		case 'T':
		case 't':
			Trigger();
 280:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <Trigger>
			while (MIP == 1){};
 284:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MIP>
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	e1 f3       	breq	.-8      	; 0x284 <main+0x6c>
			fprintf_P(fio_0,PSTR("Echo is %d %d\n\n\r"),	ECHOHigh, ECHOLow);
 28c:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <ECHOLow>
 290:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <ECHOLow+0x1>
 294:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ECHOHigh>
 298:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <ECHOHigh+0x1>
 29c:	3f 93       	push	r19
 29e:	2f 93       	push	r18
 2a0:	9f 93       	push	r25
 2a2:	8f 93       	push	r24
 2a4:	1f 93       	push	r17
 2a6:	0f 93       	push	r16
 2a8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__data_start+0x1>
 2ac:	8f 93       	push	r24
 2ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2b2:	8f 93       	push	r24
 2b4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <fprintf_P>
			break;		
 2b8:	8d b7       	in	r24, 0x3d	; 61
 2ba:	9e b7       	in	r25, 0x3e	; 62
 2bc:	08 96       	adiw	r24, 0x08	; 8
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	9e bf       	out	0x3e, r25	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	8d bf       	out	0x3d, r24	; 61
 2c8:	c0 cf       	rjmp	.-128    	; 0x24a <main+0x32>

000002ca <init_uart0>:


void init_uart0(unsigned int  BAUD) {// initialize uart 

	// Set baud rate
	UBRR0H = ((unsigned char) (BAUD>>8)) & ~0x80;
 2ca:	9f 77       	andi	r25, 0x7F	; 127
 2cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) BAUD;
 2d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
 2d4:	88 e9       	ldi	r24, 0x98	; 152
 2d6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
 2da:	8e e0       	ldi	r24, 0x0E	; 14
 2dc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
    DDRD |= (1<<DDD1);        				//  Set DDR for Txd Pin on PortD 
 2e0:	51 9a       	sbi	0x0a, 1	; 10
    DDRD &= ~(1<<DDD0);        				//  Set DDR for Rxd Pin on PortD 
 2e2:	50 98       	cbi	0x0a, 0	; 10


    TxDBuffWR0  = TxDBuffRD0 = TxDBuff0;			// Init Queues 
 2e4:	81 e6       	ldi	r24, 0x61	; 97
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <TxDBuffRD0+0x1>
 2ec:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <TxDBuffRD0>
 2f0:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <TxDBuffWR0+0x1>
 2f4:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <TxDBuffWR0>
    RxDBuffWR0  = RxDBuffRD0 = RxDBuff0;
 2f8:	81 e2       	ldi	r24, 0x21	; 33
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <RxDBuffRD0+0x1>
 300:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <RxDBuffRD0>
 304:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <RxDBuffWR0+0x1>
 308:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <RxDBuffWR0>
    TxDCnt0 = 0;
 30c:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <TxDCnt0>
    RxDCnt0 = 0;
 310:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <RxDCnt0>
 314:	08 95       	ret

00000316 <__vector_21>:

// ******************************************************
//	Handle for Tx Interrupt 
//******************************************************

ISR (USART0_UDRE_vect)  {		// Handler for uart data buffer empty interrupt 
 316:	1f 92       	push	r1
 318:	0f 92       	push	r0
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	2f 93       	push	r18
 322:	8f 93       	push	r24
 324:	9f 93       	push	r25
 326:	ef 93       	push	r30
 328:	ff 93       	push	r31

    if (TxDCnt0 > 0) {
 32a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <TxDCnt0>
 32e:	88 23       	and	r24, r24
 330:	39 f1       	breq	.+78     	; 0x380 <__vector_21+0x6a>
        UDR0 = *TxDBuffRD0;           		// write byte to data buffer 
 332:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <TxDBuffRD0>
 336:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <TxDBuffRD0+0x1>
 33a:	80 81       	ld	r24, Z
 33c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        if (++TxDBuffRD0 >= TxDBuff0 + UART_BUF_SIZE) // Wrap Pointer 
 340:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <TxDBuffRD0>
 344:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <TxDBuffRD0+0x1>
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	21 e0       	ldi	r18, 0x01	; 1
 34c:	81 3a       	cpi	r24, 0xA1	; 161
 34e:	92 07       	cpc	r25, r18
 350:	28 f4       	brcc	.+10     	; 0x35c <__vector_21+0x46>
 352:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <TxDBuffRD0+0x1>
 356:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <TxDBuffRD0>
 35a:	06 c0       	rjmp	.+12     	; 0x368 <__vector_21+0x52>
            TxDBuffRD0 = TxDBuff0;
 35c:	81 e6       	ldi	r24, 0x61	; 97
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <TxDBuffRD0+0x1>
 364:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <TxDBuffRD0>
        if(--TxDCnt0 == 0)             			// if buffer is empty: 
 368:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <TxDCnt0>
 36c:	81 50       	subi	r24, 0x01	; 1
 36e:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <TxDCnt0>
 372:	81 11       	cpse	r24, r1
 374:	05 c0       	rjmp	.+10     	; 0x380 <__vector_21+0x6a>
            UCSR0B&=~(1<<UDRIE0);                    // disable UDRIE int 
 376:	e1 ec       	ldi	r30, 0xC1	; 193
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	8f 7d       	andi	r24, 0xDF	; 223
 37e:	80 83       	st	Z, r24
    }
}
 380:	ff 91       	pop	r31
 382:	ef 91       	pop	r30
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	2f 91       	pop	r18
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <__vector_20>:

// ******************************************************
//	Handle for Rx Interrupt 
//******************************************************

ISR (USART0_RX_vect)  {  // Interrupt handler for receive complete interrupt 
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	2f 93       	push	r18
 3a0:	8f 93       	push	r24
 3a2:	9f 93       	push	r25
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31

	unsigned char key;
	 key = UDR0;            // Get UDR --> Buff 
 3a8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	 *RxDBuffWR0 = key;
 3ac:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <RxDBuffWR0>
 3b0:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <RxDBuffWR0+0x1>
 3b4:	80 83       	st	Z, r24
	if(UartEchoOn==1) {
		if(!uart0_write_buff_full())
			uart0_putc(key);
		}
    RxDCnt0++;
 3b6:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <RxDCnt0>
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
 3bc:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <RxDCnt0>
    if (++RxDBuffWR0 >= RxDBuff0 + UART_BUF_SIZE) // Wrap Pointer 
 3c0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <RxDBuffWR0>
 3c4:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <RxDBuffWR0+0x1>
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	81 36       	cpi	r24, 0x61	; 97
 3ce:	92 07       	cpc	r25, r18
 3d0:	28 f4       	brcc	.+10     	; 0x3dc <__vector_20+0x48>
 3d2:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <RxDBuffWR0+0x1>
 3d6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <RxDBuffWR0>
 3da:	06 c0       	rjmp	.+12     	; 0x3e8 <__vector_20+0x54>
        RxDBuffWR0 = RxDBuff0;
 3dc:	81 e2       	ldi	r24, 0x21	; 33
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <RxDBuffWR0+0x1>
 3e4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <RxDBuffWR0>
}
 3e8:	ff 91       	pop	r31
 3ea:	ef 91       	pop	r30
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	2f 91       	pop	r18
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <uart0_getc>:
// *****************************************************

char  uart0_getc(void) {
    unsigned char  c;

    if(RxDCnt0 > 0){
 3fc:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <RxDCnt0>
 400:	88 23       	and	r24, r24
 402:	e1 f0       	breq	.+56     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	
		cli();
 404:	f8 94       	cli
		RxDCnt0--;
 406:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <RxDCnt0>
 40a:	81 50       	subi	r24, 0x01	; 1
 40c:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <RxDCnt0>
		c = *RxDBuffRD0;              // Get Buff Char and Return  
 410:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <RxDBuffRD0>
 414:	f0 91 1c 01 	lds	r31, 0x011C	; 0x80011c <RxDBuffRD0+0x1>
 418:	81 91       	ld	r24, Z+
		if (++RxDBuffRD0 >= RxDBuff0 + UART_BUF_SIZE)  // Wrap Pointer 
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	e1 36       	cpi	r30, 0x61	; 97
 41e:	f9 07       	cpc	r31, r25
 420:	28 f4       	brcc	.+10     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 422:	f0 93 1c 01 	sts	0x011C, r31	; 0x80011c <RxDBuffRD0+0x1>
 426:	e0 93 1b 01 	sts	0x011B, r30	; 0x80011b <RxDBuffRD0>
 42a:	06 c0       	rjmp	.+12     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
			RxDBuffRD0 = RxDBuff0;
 42c:	21 e2       	ldi	r18, 0x21	; 33
 42e:	31 e0       	ldi	r19, 0x01	; 1
 430:	30 93 1c 01 	sts	0x011C, r19	; 0x80011c <RxDBuffRD0+0x1>
 434:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <RxDBuffRD0>
		sei();
 438:	78 94       	sei
		return c;
 43a:	08 95       	ret
		}
	else 
	return 0;
 43c:	80 e0       	ldi	r24, 0x00	; 0
}
 43e:	08 95       	ret

00000440 <getch0>:
//	Rx Buffer.  The function returns the character count.
// ************************************************

unsigned char  uart0_RxCount(void) {

return(RxDCnt0);
 440:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <RxDCnt0>
	uart0_putc(c);
	return 0;
}

static int getch0(FILE *stream) {
	while(uart0_RxCount() == 0);
 444:	88 23       	and	r24, r24
 446:	e1 f3       	breq	.-8      	; 0x440 <getch0>
	return uart0_getc();
 448:	0e 94 fe 01 	call	0x3fc	; 0x3fc <uart0_getc>
}
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	08 95       	ret

00000450 <uart0_putc>:
//	Places a character in the Tx buffer Initiates the transfer and lets the 
//	ISR do the rest.
// *****************************************************

unsigned char  uart0_putc(char  c) {
    if (TxDCnt0<UART_BUF_SIZE) {
 450:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <TxDCnt0>
 454:	90 34       	cpi	r25, 0x40	; 64
 456:	38 f5       	brcc	.+78     	; 0x4a6 <uart0_putc+0x56>
        cli();
 458:	f8 94       	cli
        TxDCnt0++;
 45a:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <TxDCnt0>
 45e:	9f 5f       	subi	r25, 0xFF	; 255
 460:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <TxDCnt0>
        *TxDBuffWR0 = c;               		// put character into buffer 
 464:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <TxDBuffWR0>
 468:	f0 91 a3 01 	lds	r31, 0x01A3	; 0x8001a3 <TxDBuffWR0+0x1>
 46c:	80 83       	st	Z, r24
        if (++TxDBuffWR0 >= TxDBuff0 + UART_BUF_SIZE) 
 46e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <TxDBuffWR0>
 472:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <TxDBuffWR0+0x1>
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	21 e0       	ldi	r18, 0x01	; 1
 47a:	81 3a       	cpi	r24, 0xA1	; 161
 47c:	92 07       	cpc	r25, r18
 47e:	28 f4       	brcc	.+10     	; 0x48a <uart0_putc+0x3a>
 480:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <TxDBuffWR0+0x1>
 484:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <TxDBuffWR0>
 488:	06 c0       	rjmp	.+12     	; 0x496 <uart0_putc+0x46>
													// pointer wrapping 
            TxDBuffWR0 = TxDBuff0;
 48a:	81 e6       	ldi	r24, 0x61	; 97
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <TxDBuffWR0+0x1>
 492:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <TxDBuffWR0>
        UCSR0B|=(1<<UDRIE0);   				// enable UDRIE int 
 496:	e1 ec       	ldi	r30, 0xC1	; 193
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 81       	ld	r24, Z
 49c:	80 62       	ori	r24, 0x20	; 32
 49e:	80 83       	st	Z, r24
        sei();
 4a0:	78 94       	sei
        return 1;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	08 95       	ret
    } 
    else 
        return 0;                           // buffer is full 
 4a6:	80 e0       	ldi	r24, 0x00	; 0
}
 4a8:	08 95       	ret

000004aa <uart0_RxCount>:
//	Rx Buffer.  The function returns the character count.
// ************************************************

unsigned char  uart0_RxCount(void) {

return(RxDCnt0);
 4aa:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <RxDCnt0>

}
 4ae:	08 95       	ret

000004b0 <uart0_write_buff_full>:
// ************************************************
//	Call this function to check for the Tx Buffer is full.  
//	The function returns 1 if full 0 if not..
// ************************************************
unsigned char  uart0_write_buff_full(void) {
if(TxDCnt0 >= UART_BUF_SIZE)
 4b0:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <TxDCnt0>
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 34       	cpi	r25, 0x40	; 64
 4b8:	08 f4       	brcc	.+2      	; 0x4bc <uart0_write_buff_full+0xc>
 4ba:	80 e0       	ldi	r24, 0x00	; 0
	return 1 ;
return 0;
}
 4bc:	08 95       	ret

000004be <putch0>:
static int getch0(FILE *stream);

FILE  usart0_Stream = FDEV_SETUP_STREAM(putch0, getch0, _FDEV_SETUP_RW);


static int putch0(char c, FILE *stream) {
 4be:	cf 93       	push	r28
 4c0:	c8 2f       	mov	r28, r24
	while(uart0_write_buff_full() == 1);
 4c2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <uart0_write_buff_full>
 4c6:	81 30       	cpi	r24, 0x01	; 1
 4c8:	e1 f3       	breq	.-8      	; 0x4c2 <putch0+0x4>
	uart0_putc(c);
 4ca:	8c 2f       	mov	r24, r28
 4cc:	0e 94 28 02 	call	0x450	; 0x450 <uart0_putc>
	return 0;
}
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	cf 91       	pop	r28
 4d6:	08 95       	ret

000004d8 <fprintf_P>:
 4d8:	a0 e0       	ldi	r26, 0x00	; 0
 4da:	b0 e0       	ldi	r27, 0x00	; 0
 4dc:	e2 e7       	ldi	r30, 0x72	; 114
 4de:	f2 e0       	ldi	r31, 0x02	; 2
 4e0:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__prologue_saves__+0x1c>
 4e4:	0f 81       	ldd	r16, Y+7	; 0x07
 4e6:	18 85       	ldd	r17, Y+8	; 0x08
 4e8:	f8 01       	movw	r30, r16
 4ea:	83 81       	ldd	r24, Z+3	; 0x03
 4ec:	88 60       	ori	r24, 0x08	; 8
 4ee:	83 83       	std	Z+3, r24	; 0x03
 4f0:	ae 01       	movw	r20, r28
 4f2:	45 5f       	subi	r20, 0xF5	; 245
 4f4:	5f 4f       	sbci	r21, 0xFF	; 255
 4f6:	69 85       	ldd	r22, Y+9	; 0x09
 4f8:	7a 85       	ldd	r23, Y+10	; 0x0a
 4fa:	c8 01       	movw	r24, r16
 4fc:	0e 94 87 02 	call	0x50e	; 0x50e <vfprintf>
 500:	f8 01       	movw	r30, r16
 502:	23 81       	ldd	r18, Z+3	; 0x03
 504:	27 7f       	andi	r18, 0xF7	; 247
 506:	23 83       	std	Z+3, r18	; 0x03
 508:	e4 e0       	ldi	r30, 0x04	; 4
 50a:	0c 94 42 05 	jmp	0xa84	; 0xa84 <__epilogue_restores__+0x1c>

0000050e <vfprintf>:
 50e:	ab e0       	ldi	r26, 0x0B	; 11
 510:	b0 e0       	ldi	r27, 0x00	; 0
 512:	ed e8       	ldi	r30, 0x8D	; 141
 514:	f2 e0       	ldi	r31, 0x02	; 2
 516:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__prologue_saves__>
 51a:	6c 01       	movw	r12, r24
 51c:	7b 01       	movw	r14, r22
 51e:	8a 01       	movw	r16, r20
 520:	fc 01       	movw	r30, r24
 522:	17 82       	std	Z+7, r1	; 0x07
 524:	16 82       	std	Z+6, r1	; 0x06
 526:	83 81       	ldd	r24, Z+3	; 0x03
 528:	81 ff       	sbrs	r24, 1
 52a:	cc c1       	rjmp	.+920    	; 0x8c4 <vfprintf+0x3b6>
 52c:	ce 01       	movw	r24, r28
 52e:	01 96       	adiw	r24, 0x01	; 1
 530:	3c 01       	movw	r6, r24
 532:	f6 01       	movw	r30, r12
 534:	93 81       	ldd	r25, Z+3	; 0x03
 536:	f7 01       	movw	r30, r14
 538:	93 fd       	sbrc	r25, 3
 53a:	85 91       	lpm	r24, Z+
 53c:	93 ff       	sbrs	r25, 3
 53e:	81 91       	ld	r24, Z+
 540:	7f 01       	movw	r14, r30
 542:	88 23       	and	r24, r24
 544:	09 f4       	brne	.+2      	; 0x548 <vfprintf+0x3a>
 546:	ba c1       	rjmp	.+884    	; 0x8bc <vfprintf+0x3ae>
 548:	85 32       	cpi	r24, 0x25	; 37
 54a:	39 f4       	brne	.+14     	; 0x55a <vfprintf+0x4c>
 54c:	93 fd       	sbrc	r25, 3
 54e:	85 91       	lpm	r24, Z+
 550:	93 ff       	sbrs	r25, 3
 552:	81 91       	ld	r24, Z+
 554:	7f 01       	movw	r14, r30
 556:	85 32       	cpi	r24, 0x25	; 37
 558:	29 f4       	brne	.+10     	; 0x564 <vfprintf+0x56>
 55a:	b6 01       	movw	r22, r12
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 562:	e7 cf       	rjmp	.-50     	; 0x532 <vfprintf+0x24>
 564:	91 2c       	mov	r9, r1
 566:	21 2c       	mov	r2, r1
 568:	31 2c       	mov	r3, r1
 56a:	ff e1       	ldi	r31, 0x1F	; 31
 56c:	f3 15       	cp	r31, r3
 56e:	d8 f0       	brcs	.+54     	; 0x5a6 <vfprintf+0x98>
 570:	8b 32       	cpi	r24, 0x2B	; 43
 572:	79 f0       	breq	.+30     	; 0x592 <vfprintf+0x84>
 574:	38 f4       	brcc	.+14     	; 0x584 <vfprintf+0x76>
 576:	80 32       	cpi	r24, 0x20	; 32
 578:	79 f0       	breq	.+30     	; 0x598 <vfprintf+0x8a>
 57a:	83 32       	cpi	r24, 0x23	; 35
 57c:	a1 f4       	brne	.+40     	; 0x5a6 <vfprintf+0x98>
 57e:	23 2d       	mov	r18, r3
 580:	20 61       	ori	r18, 0x10	; 16
 582:	1d c0       	rjmp	.+58     	; 0x5be <vfprintf+0xb0>
 584:	8d 32       	cpi	r24, 0x2D	; 45
 586:	61 f0       	breq	.+24     	; 0x5a0 <vfprintf+0x92>
 588:	80 33       	cpi	r24, 0x30	; 48
 58a:	69 f4       	brne	.+26     	; 0x5a6 <vfprintf+0x98>
 58c:	23 2d       	mov	r18, r3
 58e:	21 60       	ori	r18, 0x01	; 1
 590:	16 c0       	rjmp	.+44     	; 0x5be <vfprintf+0xb0>
 592:	83 2d       	mov	r24, r3
 594:	82 60       	ori	r24, 0x02	; 2
 596:	38 2e       	mov	r3, r24
 598:	e3 2d       	mov	r30, r3
 59a:	e4 60       	ori	r30, 0x04	; 4
 59c:	3e 2e       	mov	r3, r30
 59e:	2a c0       	rjmp	.+84     	; 0x5f4 <vfprintf+0xe6>
 5a0:	f3 2d       	mov	r31, r3
 5a2:	f8 60       	ori	r31, 0x08	; 8
 5a4:	1d c0       	rjmp	.+58     	; 0x5e0 <vfprintf+0xd2>
 5a6:	37 fc       	sbrc	r3, 7
 5a8:	2d c0       	rjmp	.+90     	; 0x604 <vfprintf+0xf6>
 5aa:	20 ed       	ldi	r18, 0xD0	; 208
 5ac:	28 0f       	add	r18, r24
 5ae:	2a 30       	cpi	r18, 0x0A	; 10
 5b0:	40 f0       	brcs	.+16     	; 0x5c2 <vfprintf+0xb4>
 5b2:	8e 32       	cpi	r24, 0x2E	; 46
 5b4:	b9 f4       	brne	.+46     	; 0x5e4 <vfprintf+0xd6>
 5b6:	36 fc       	sbrc	r3, 6
 5b8:	81 c1       	rjmp	.+770    	; 0x8bc <vfprintf+0x3ae>
 5ba:	23 2d       	mov	r18, r3
 5bc:	20 64       	ori	r18, 0x40	; 64
 5be:	32 2e       	mov	r3, r18
 5c0:	19 c0       	rjmp	.+50     	; 0x5f4 <vfprintf+0xe6>
 5c2:	36 fe       	sbrs	r3, 6
 5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <vfprintf+0xc4>
 5c6:	8a e0       	ldi	r24, 0x0A	; 10
 5c8:	98 9e       	mul	r9, r24
 5ca:	20 0d       	add	r18, r0
 5cc:	11 24       	eor	r1, r1
 5ce:	92 2e       	mov	r9, r18
 5d0:	11 c0       	rjmp	.+34     	; 0x5f4 <vfprintf+0xe6>
 5d2:	ea e0       	ldi	r30, 0x0A	; 10
 5d4:	2e 9e       	mul	r2, r30
 5d6:	20 0d       	add	r18, r0
 5d8:	11 24       	eor	r1, r1
 5da:	22 2e       	mov	r2, r18
 5dc:	f3 2d       	mov	r31, r3
 5de:	f0 62       	ori	r31, 0x20	; 32
 5e0:	3f 2e       	mov	r3, r31
 5e2:	08 c0       	rjmp	.+16     	; 0x5f4 <vfprintf+0xe6>
 5e4:	8c 36       	cpi	r24, 0x6C	; 108
 5e6:	21 f4       	brne	.+8      	; 0x5f0 <vfprintf+0xe2>
 5e8:	83 2d       	mov	r24, r3
 5ea:	80 68       	ori	r24, 0x80	; 128
 5ec:	38 2e       	mov	r3, r24
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <vfprintf+0xe6>
 5f0:	88 36       	cpi	r24, 0x68	; 104
 5f2:	41 f4       	brne	.+16     	; 0x604 <vfprintf+0xf6>
 5f4:	f7 01       	movw	r30, r14
 5f6:	93 fd       	sbrc	r25, 3
 5f8:	85 91       	lpm	r24, Z+
 5fa:	93 ff       	sbrs	r25, 3
 5fc:	81 91       	ld	r24, Z+
 5fe:	7f 01       	movw	r14, r30
 600:	81 11       	cpse	r24, r1
 602:	b3 cf       	rjmp	.-154    	; 0x56a <vfprintf+0x5c>
 604:	98 2f       	mov	r25, r24
 606:	9f 7d       	andi	r25, 0xDF	; 223
 608:	95 54       	subi	r25, 0x45	; 69
 60a:	93 30       	cpi	r25, 0x03	; 3
 60c:	28 f4       	brcc	.+10     	; 0x618 <vfprintf+0x10a>
 60e:	0c 5f       	subi	r16, 0xFC	; 252
 610:	1f 4f       	sbci	r17, 0xFF	; 255
 612:	9f e3       	ldi	r25, 0x3F	; 63
 614:	99 83       	std	Y+1, r25	; 0x01
 616:	0d c0       	rjmp	.+26     	; 0x632 <vfprintf+0x124>
 618:	83 36       	cpi	r24, 0x63	; 99
 61a:	31 f0       	breq	.+12     	; 0x628 <vfprintf+0x11a>
 61c:	83 37       	cpi	r24, 0x73	; 115
 61e:	71 f0       	breq	.+28     	; 0x63c <vfprintf+0x12e>
 620:	83 35       	cpi	r24, 0x53	; 83
 622:	09 f0       	breq	.+2      	; 0x626 <vfprintf+0x118>
 624:	59 c0       	rjmp	.+178    	; 0x6d8 <vfprintf+0x1ca>
 626:	21 c0       	rjmp	.+66     	; 0x66a <vfprintf+0x15c>
 628:	f8 01       	movw	r30, r16
 62a:	80 81       	ld	r24, Z
 62c:	89 83       	std	Y+1, r24	; 0x01
 62e:	0e 5f       	subi	r16, 0xFE	; 254
 630:	1f 4f       	sbci	r17, 0xFF	; 255
 632:	88 24       	eor	r8, r8
 634:	83 94       	inc	r8
 636:	91 2c       	mov	r9, r1
 638:	53 01       	movw	r10, r6
 63a:	13 c0       	rjmp	.+38     	; 0x662 <vfprintf+0x154>
 63c:	28 01       	movw	r4, r16
 63e:	f2 e0       	ldi	r31, 0x02	; 2
 640:	4f 0e       	add	r4, r31
 642:	51 1c       	adc	r5, r1
 644:	f8 01       	movw	r30, r16
 646:	a0 80       	ld	r10, Z
 648:	b1 80       	ldd	r11, Z+1	; 0x01
 64a:	36 fe       	sbrs	r3, 6
 64c:	03 c0       	rjmp	.+6      	; 0x654 <vfprintf+0x146>
 64e:	69 2d       	mov	r22, r9
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <vfprintf+0x14a>
 654:	6f ef       	ldi	r22, 0xFF	; 255
 656:	7f ef       	ldi	r23, 0xFF	; 255
 658:	c5 01       	movw	r24, r10
 65a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <strnlen>
 65e:	4c 01       	movw	r8, r24
 660:	82 01       	movw	r16, r4
 662:	f3 2d       	mov	r31, r3
 664:	ff 77       	andi	r31, 0x7F	; 127
 666:	3f 2e       	mov	r3, r31
 668:	16 c0       	rjmp	.+44     	; 0x696 <vfprintf+0x188>
 66a:	28 01       	movw	r4, r16
 66c:	22 e0       	ldi	r18, 0x02	; 2
 66e:	42 0e       	add	r4, r18
 670:	51 1c       	adc	r5, r1
 672:	f8 01       	movw	r30, r16
 674:	a0 80       	ld	r10, Z
 676:	b1 80       	ldd	r11, Z+1	; 0x01
 678:	36 fe       	sbrs	r3, 6
 67a:	03 c0       	rjmp	.+6      	; 0x682 <vfprintf+0x174>
 67c:	69 2d       	mov	r22, r9
 67e:	70 e0       	ldi	r23, 0x00	; 0
 680:	02 c0       	rjmp	.+4      	; 0x686 <vfprintf+0x178>
 682:	6f ef       	ldi	r22, 0xFF	; 255
 684:	7f ef       	ldi	r23, 0xFF	; 255
 686:	c5 01       	movw	r24, r10
 688:	0e 94 68 04 	call	0x8d0	; 0x8d0 <strnlen_P>
 68c:	4c 01       	movw	r8, r24
 68e:	f3 2d       	mov	r31, r3
 690:	f0 68       	ori	r31, 0x80	; 128
 692:	3f 2e       	mov	r3, r31
 694:	82 01       	movw	r16, r4
 696:	33 fc       	sbrc	r3, 3
 698:	1b c0       	rjmp	.+54     	; 0x6d0 <vfprintf+0x1c2>
 69a:	82 2d       	mov	r24, r2
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	88 16       	cp	r8, r24
 6a0:	99 06       	cpc	r9, r25
 6a2:	b0 f4       	brcc	.+44     	; 0x6d0 <vfprintf+0x1c2>
 6a4:	b6 01       	movw	r22, r12
 6a6:	80 e2       	ldi	r24, 0x20	; 32
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 6ae:	2a 94       	dec	r2
 6b0:	f4 cf       	rjmp	.-24     	; 0x69a <vfprintf+0x18c>
 6b2:	f5 01       	movw	r30, r10
 6b4:	37 fc       	sbrc	r3, 7
 6b6:	85 91       	lpm	r24, Z+
 6b8:	37 fe       	sbrs	r3, 7
 6ba:	81 91       	ld	r24, Z+
 6bc:	5f 01       	movw	r10, r30
 6be:	b6 01       	movw	r22, r12
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 6c6:	21 10       	cpse	r2, r1
 6c8:	2a 94       	dec	r2
 6ca:	21 e0       	ldi	r18, 0x01	; 1
 6cc:	82 1a       	sub	r8, r18
 6ce:	91 08       	sbc	r9, r1
 6d0:	81 14       	cp	r8, r1
 6d2:	91 04       	cpc	r9, r1
 6d4:	71 f7       	brne	.-36     	; 0x6b2 <vfprintf+0x1a4>
 6d6:	e8 c0       	rjmp	.+464    	; 0x8a8 <vfprintf+0x39a>
 6d8:	84 36       	cpi	r24, 0x64	; 100
 6da:	11 f0       	breq	.+4      	; 0x6e0 <vfprintf+0x1d2>
 6dc:	89 36       	cpi	r24, 0x69	; 105
 6de:	41 f5       	brne	.+80     	; 0x730 <vfprintf+0x222>
 6e0:	f8 01       	movw	r30, r16
 6e2:	37 fe       	sbrs	r3, 7
 6e4:	07 c0       	rjmp	.+14     	; 0x6f4 <vfprintf+0x1e6>
 6e6:	60 81       	ld	r22, Z
 6e8:	71 81       	ldd	r23, Z+1	; 0x01
 6ea:	82 81       	ldd	r24, Z+2	; 0x02
 6ec:	93 81       	ldd	r25, Z+3	; 0x03
 6ee:	0c 5f       	subi	r16, 0xFC	; 252
 6f0:	1f 4f       	sbci	r17, 0xFF	; 255
 6f2:	08 c0       	rjmp	.+16     	; 0x704 <vfprintf+0x1f6>
 6f4:	60 81       	ld	r22, Z
 6f6:	71 81       	ldd	r23, Z+1	; 0x01
 6f8:	07 2e       	mov	r0, r23
 6fa:	00 0c       	add	r0, r0
 6fc:	88 0b       	sbc	r24, r24
 6fe:	99 0b       	sbc	r25, r25
 700:	0e 5f       	subi	r16, 0xFE	; 254
 702:	1f 4f       	sbci	r17, 0xFF	; 255
 704:	f3 2d       	mov	r31, r3
 706:	ff 76       	andi	r31, 0x6F	; 111
 708:	3f 2e       	mov	r3, r31
 70a:	97 ff       	sbrs	r25, 7
 70c:	09 c0       	rjmp	.+18     	; 0x720 <vfprintf+0x212>
 70e:	90 95       	com	r25
 710:	80 95       	com	r24
 712:	70 95       	com	r23
 714:	61 95       	neg	r22
 716:	7f 4f       	sbci	r23, 0xFF	; 255
 718:	8f 4f       	sbci	r24, 0xFF	; 255
 71a:	9f 4f       	sbci	r25, 0xFF	; 255
 71c:	f0 68       	ori	r31, 0x80	; 128
 71e:	3f 2e       	mov	r3, r31
 720:	2a e0       	ldi	r18, 0x0A	; 10
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	a3 01       	movw	r20, r6
 726:	0e 94 ba 04 	call	0x974	; 0x974 <__ultoa_invert>
 72a:	88 2e       	mov	r8, r24
 72c:	86 18       	sub	r8, r6
 72e:	45 c0       	rjmp	.+138    	; 0x7ba <vfprintf+0x2ac>
 730:	85 37       	cpi	r24, 0x75	; 117
 732:	31 f4       	brne	.+12     	; 0x740 <vfprintf+0x232>
 734:	23 2d       	mov	r18, r3
 736:	2f 7e       	andi	r18, 0xEF	; 239
 738:	b2 2e       	mov	r11, r18
 73a:	2a e0       	ldi	r18, 0x0A	; 10
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	25 c0       	rjmp	.+74     	; 0x78a <vfprintf+0x27c>
 740:	93 2d       	mov	r25, r3
 742:	99 7f       	andi	r25, 0xF9	; 249
 744:	b9 2e       	mov	r11, r25
 746:	8f 36       	cpi	r24, 0x6F	; 111
 748:	c1 f0       	breq	.+48     	; 0x77a <vfprintf+0x26c>
 74a:	18 f4       	brcc	.+6      	; 0x752 <vfprintf+0x244>
 74c:	88 35       	cpi	r24, 0x58	; 88
 74e:	79 f0       	breq	.+30     	; 0x76e <vfprintf+0x260>
 750:	b5 c0       	rjmp	.+362    	; 0x8bc <vfprintf+0x3ae>
 752:	80 37       	cpi	r24, 0x70	; 112
 754:	19 f0       	breq	.+6      	; 0x75c <vfprintf+0x24e>
 756:	88 37       	cpi	r24, 0x78	; 120
 758:	21 f0       	breq	.+8      	; 0x762 <vfprintf+0x254>
 75a:	b0 c0       	rjmp	.+352    	; 0x8bc <vfprintf+0x3ae>
 75c:	e9 2f       	mov	r30, r25
 75e:	e0 61       	ori	r30, 0x10	; 16
 760:	be 2e       	mov	r11, r30
 762:	b4 fe       	sbrs	r11, 4
 764:	0d c0       	rjmp	.+26     	; 0x780 <vfprintf+0x272>
 766:	fb 2d       	mov	r31, r11
 768:	f4 60       	ori	r31, 0x04	; 4
 76a:	bf 2e       	mov	r11, r31
 76c:	09 c0       	rjmp	.+18     	; 0x780 <vfprintf+0x272>
 76e:	34 fe       	sbrs	r3, 4
 770:	0a c0       	rjmp	.+20     	; 0x786 <vfprintf+0x278>
 772:	29 2f       	mov	r18, r25
 774:	26 60       	ori	r18, 0x06	; 6
 776:	b2 2e       	mov	r11, r18
 778:	06 c0       	rjmp	.+12     	; 0x786 <vfprintf+0x278>
 77a:	28 e0       	ldi	r18, 0x08	; 8
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	05 c0       	rjmp	.+10     	; 0x78a <vfprintf+0x27c>
 780:	20 e1       	ldi	r18, 0x10	; 16
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	02 c0       	rjmp	.+4      	; 0x78a <vfprintf+0x27c>
 786:	20 e1       	ldi	r18, 0x10	; 16
 788:	32 e0       	ldi	r19, 0x02	; 2
 78a:	f8 01       	movw	r30, r16
 78c:	b7 fe       	sbrs	r11, 7
 78e:	07 c0       	rjmp	.+14     	; 0x79e <vfprintf+0x290>
 790:	60 81       	ld	r22, Z
 792:	71 81       	ldd	r23, Z+1	; 0x01
 794:	82 81       	ldd	r24, Z+2	; 0x02
 796:	93 81       	ldd	r25, Z+3	; 0x03
 798:	0c 5f       	subi	r16, 0xFC	; 252
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
 79c:	06 c0       	rjmp	.+12     	; 0x7aa <vfprintf+0x29c>
 79e:	60 81       	ld	r22, Z
 7a0:	71 81       	ldd	r23, Z+1	; 0x01
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 5f       	subi	r16, 0xFE	; 254
 7a8:	1f 4f       	sbci	r17, 0xFF	; 255
 7aa:	a3 01       	movw	r20, r6
 7ac:	0e 94 ba 04 	call	0x974	; 0x974 <__ultoa_invert>
 7b0:	88 2e       	mov	r8, r24
 7b2:	86 18       	sub	r8, r6
 7b4:	fb 2d       	mov	r31, r11
 7b6:	ff 77       	andi	r31, 0x7F	; 127
 7b8:	3f 2e       	mov	r3, r31
 7ba:	36 fe       	sbrs	r3, 6
 7bc:	0d c0       	rjmp	.+26     	; 0x7d8 <vfprintf+0x2ca>
 7be:	23 2d       	mov	r18, r3
 7c0:	2e 7f       	andi	r18, 0xFE	; 254
 7c2:	a2 2e       	mov	r10, r18
 7c4:	89 14       	cp	r8, r9
 7c6:	58 f4       	brcc	.+22     	; 0x7de <vfprintf+0x2d0>
 7c8:	34 fe       	sbrs	r3, 4
 7ca:	0b c0       	rjmp	.+22     	; 0x7e2 <vfprintf+0x2d4>
 7cc:	32 fc       	sbrc	r3, 2
 7ce:	09 c0       	rjmp	.+18     	; 0x7e2 <vfprintf+0x2d4>
 7d0:	83 2d       	mov	r24, r3
 7d2:	8e 7e       	andi	r24, 0xEE	; 238
 7d4:	a8 2e       	mov	r10, r24
 7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <vfprintf+0x2d4>
 7d8:	b8 2c       	mov	r11, r8
 7da:	a3 2c       	mov	r10, r3
 7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <vfprintf+0x2d6>
 7de:	b8 2c       	mov	r11, r8
 7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <vfprintf+0x2d6>
 7e2:	b9 2c       	mov	r11, r9
 7e4:	a4 fe       	sbrs	r10, 4
 7e6:	0f c0       	rjmp	.+30     	; 0x806 <vfprintf+0x2f8>
 7e8:	fe 01       	movw	r30, r28
 7ea:	e8 0d       	add	r30, r8
 7ec:	f1 1d       	adc	r31, r1
 7ee:	80 81       	ld	r24, Z
 7f0:	80 33       	cpi	r24, 0x30	; 48
 7f2:	21 f4       	brne	.+8      	; 0x7fc <vfprintf+0x2ee>
 7f4:	9a 2d       	mov	r25, r10
 7f6:	99 7e       	andi	r25, 0xE9	; 233
 7f8:	a9 2e       	mov	r10, r25
 7fa:	09 c0       	rjmp	.+18     	; 0x80e <vfprintf+0x300>
 7fc:	a2 fe       	sbrs	r10, 2
 7fe:	06 c0       	rjmp	.+12     	; 0x80c <vfprintf+0x2fe>
 800:	b3 94       	inc	r11
 802:	b3 94       	inc	r11
 804:	04 c0       	rjmp	.+8      	; 0x80e <vfprintf+0x300>
 806:	8a 2d       	mov	r24, r10
 808:	86 78       	andi	r24, 0x86	; 134
 80a:	09 f0       	breq	.+2      	; 0x80e <vfprintf+0x300>
 80c:	b3 94       	inc	r11
 80e:	a3 fc       	sbrc	r10, 3
 810:	11 c0       	rjmp	.+34     	; 0x834 <vfprintf+0x326>
 812:	a0 fe       	sbrs	r10, 0
 814:	06 c0       	rjmp	.+12     	; 0x822 <vfprintf+0x314>
 816:	b2 14       	cp	r11, r2
 818:	88 f4       	brcc	.+34     	; 0x83c <vfprintf+0x32e>
 81a:	28 0c       	add	r2, r8
 81c:	92 2c       	mov	r9, r2
 81e:	9b 18       	sub	r9, r11
 820:	0e c0       	rjmp	.+28     	; 0x83e <vfprintf+0x330>
 822:	b2 14       	cp	r11, r2
 824:	60 f4       	brcc	.+24     	; 0x83e <vfprintf+0x330>
 826:	b6 01       	movw	r22, r12
 828:	80 e2       	ldi	r24, 0x20	; 32
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 830:	b3 94       	inc	r11
 832:	f7 cf       	rjmp	.-18     	; 0x822 <vfprintf+0x314>
 834:	b2 14       	cp	r11, r2
 836:	18 f4       	brcc	.+6      	; 0x83e <vfprintf+0x330>
 838:	2b 18       	sub	r2, r11
 83a:	02 c0       	rjmp	.+4      	; 0x840 <vfprintf+0x332>
 83c:	98 2c       	mov	r9, r8
 83e:	21 2c       	mov	r2, r1
 840:	a4 fe       	sbrs	r10, 4
 842:	10 c0       	rjmp	.+32     	; 0x864 <vfprintf+0x356>
 844:	b6 01       	movw	r22, r12
 846:	80 e3       	ldi	r24, 0x30	; 48
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 84e:	a2 fe       	sbrs	r10, 2
 850:	17 c0       	rjmp	.+46     	; 0x880 <vfprintf+0x372>
 852:	a1 fc       	sbrc	r10, 1
 854:	03 c0       	rjmp	.+6      	; 0x85c <vfprintf+0x34e>
 856:	88 e7       	ldi	r24, 0x78	; 120
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	02 c0       	rjmp	.+4      	; 0x860 <vfprintf+0x352>
 85c:	88 e5       	ldi	r24, 0x58	; 88
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	b6 01       	movw	r22, r12
 862:	0c c0       	rjmp	.+24     	; 0x87c <vfprintf+0x36e>
 864:	8a 2d       	mov	r24, r10
 866:	86 78       	andi	r24, 0x86	; 134
 868:	59 f0       	breq	.+22     	; 0x880 <vfprintf+0x372>
 86a:	a1 fe       	sbrs	r10, 1
 86c:	02 c0       	rjmp	.+4      	; 0x872 <vfprintf+0x364>
 86e:	8b e2       	ldi	r24, 0x2B	; 43
 870:	01 c0       	rjmp	.+2      	; 0x874 <vfprintf+0x366>
 872:	80 e2       	ldi	r24, 0x20	; 32
 874:	a7 fc       	sbrc	r10, 7
 876:	8d e2       	ldi	r24, 0x2D	; 45
 878:	b6 01       	movw	r22, r12
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 880:	89 14       	cp	r8, r9
 882:	38 f4       	brcc	.+14     	; 0x892 <vfprintf+0x384>
 884:	b6 01       	movw	r22, r12
 886:	80 e3       	ldi	r24, 0x30	; 48
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 88e:	9a 94       	dec	r9
 890:	f7 cf       	rjmp	.-18     	; 0x880 <vfprintf+0x372>
 892:	8a 94       	dec	r8
 894:	f3 01       	movw	r30, r6
 896:	e8 0d       	add	r30, r8
 898:	f1 1d       	adc	r31, r1
 89a:	80 81       	ld	r24, Z
 89c:	b6 01       	movw	r22, r12
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 8a4:	81 10       	cpse	r8, r1
 8a6:	f5 cf       	rjmp	.-22     	; 0x892 <vfprintf+0x384>
 8a8:	22 20       	and	r2, r2
 8aa:	09 f4       	brne	.+2      	; 0x8ae <vfprintf+0x3a0>
 8ac:	42 ce       	rjmp	.-892    	; 0x532 <vfprintf+0x24>
 8ae:	b6 01       	movw	r22, r12
 8b0:	80 e2       	ldi	r24, 0x20	; 32
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <fputc>
 8b8:	2a 94       	dec	r2
 8ba:	f6 cf       	rjmp	.-20     	; 0x8a8 <vfprintf+0x39a>
 8bc:	f6 01       	movw	r30, r12
 8be:	86 81       	ldd	r24, Z+6	; 0x06
 8c0:	97 81       	ldd	r25, Z+7	; 0x07
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <vfprintf+0x3ba>
 8c4:	8f ef       	ldi	r24, 0xFF	; 255
 8c6:	9f ef       	ldi	r25, 0xFF	; 255
 8c8:	2b 96       	adiw	r28, 0x0b	; 11
 8ca:	e2 e1       	ldi	r30, 0x12	; 18
 8cc:	0c 94 34 05 	jmp	0xa68	; 0xa68 <__epilogue_restores__>

000008d0 <strnlen_P>:
 8d0:	fc 01       	movw	r30, r24
 8d2:	05 90       	lpm	r0, Z+
 8d4:	61 50       	subi	r22, 0x01	; 1
 8d6:	70 40       	sbci	r23, 0x00	; 0
 8d8:	01 10       	cpse	r0, r1
 8da:	d8 f7       	brcc	.-10     	; 0x8d2 <strnlen_P+0x2>
 8dc:	80 95       	com	r24
 8de:	90 95       	com	r25
 8e0:	8e 0f       	add	r24, r30
 8e2:	9f 1f       	adc	r25, r31
 8e4:	08 95       	ret

000008e6 <strnlen>:
 8e6:	fc 01       	movw	r30, r24
 8e8:	61 50       	subi	r22, 0x01	; 1
 8ea:	70 40       	sbci	r23, 0x00	; 0
 8ec:	01 90       	ld	r0, Z+
 8ee:	01 10       	cpse	r0, r1
 8f0:	d8 f7       	brcc	.-10     	; 0x8e8 <strnlen+0x2>
 8f2:	80 95       	com	r24
 8f4:	90 95       	com	r25
 8f6:	8e 0f       	add	r24, r30
 8f8:	9f 1f       	adc	r25, r31
 8fa:	08 95       	ret

000008fc <fputc>:
 8fc:	0f 93       	push	r16
 8fe:	1f 93       	push	r17
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
 904:	fb 01       	movw	r30, r22
 906:	23 81       	ldd	r18, Z+3	; 0x03
 908:	21 fd       	sbrc	r18, 1
 90a:	03 c0       	rjmp	.+6      	; 0x912 <fputc+0x16>
 90c:	8f ef       	ldi	r24, 0xFF	; 255
 90e:	9f ef       	ldi	r25, 0xFF	; 255
 910:	2c c0       	rjmp	.+88     	; 0x96a <fputc+0x6e>
 912:	22 ff       	sbrs	r18, 2
 914:	16 c0       	rjmp	.+44     	; 0x942 <fputc+0x46>
 916:	46 81       	ldd	r20, Z+6	; 0x06
 918:	57 81       	ldd	r21, Z+7	; 0x07
 91a:	24 81       	ldd	r18, Z+4	; 0x04
 91c:	35 81       	ldd	r19, Z+5	; 0x05
 91e:	42 17       	cp	r20, r18
 920:	53 07       	cpc	r21, r19
 922:	44 f4       	brge	.+16     	; 0x934 <fputc+0x38>
 924:	a0 81       	ld	r26, Z
 926:	b1 81       	ldd	r27, Z+1	; 0x01
 928:	9d 01       	movw	r18, r26
 92a:	2f 5f       	subi	r18, 0xFF	; 255
 92c:	3f 4f       	sbci	r19, 0xFF	; 255
 92e:	31 83       	std	Z+1, r19	; 0x01
 930:	20 83       	st	Z, r18
 932:	8c 93       	st	X, r24
 934:	26 81       	ldd	r18, Z+6	; 0x06
 936:	37 81       	ldd	r19, Z+7	; 0x07
 938:	2f 5f       	subi	r18, 0xFF	; 255
 93a:	3f 4f       	sbci	r19, 0xFF	; 255
 93c:	37 83       	std	Z+7, r19	; 0x07
 93e:	26 83       	std	Z+6, r18	; 0x06
 940:	14 c0       	rjmp	.+40     	; 0x96a <fputc+0x6e>
 942:	8b 01       	movw	r16, r22
 944:	ec 01       	movw	r28, r24
 946:	fb 01       	movw	r30, r22
 948:	00 84       	ldd	r0, Z+8	; 0x08
 94a:	f1 85       	ldd	r31, Z+9	; 0x09
 94c:	e0 2d       	mov	r30, r0
 94e:	09 95       	icall
 950:	89 2b       	or	r24, r25
 952:	e1 f6       	brne	.-72     	; 0x90c <fputc+0x10>
 954:	d8 01       	movw	r26, r16
 956:	16 96       	adiw	r26, 0x06	; 6
 958:	8d 91       	ld	r24, X+
 95a:	9c 91       	ld	r25, X
 95c:	17 97       	sbiw	r26, 0x07	; 7
 95e:	01 96       	adiw	r24, 0x01	; 1
 960:	17 96       	adiw	r26, 0x07	; 7
 962:	9c 93       	st	X, r25
 964:	8e 93       	st	-X, r24
 966:	16 97       	sbiw	r26, 0x06	; 6
 968:	ce 01       	movw	r24, r28
 96a:	df 91       	pop	r29
 96c:	cf 91       	pop	r28
 96e:	1f 91       	pop	r17
 970:	0f 91       	pop	r16
 972:	08 95       	ret

00000974 <__ultoa_invert>:
 974:	fa 01       	movw	r30, r20
 976:	aa 27       	eor	r26, r26
 978:	28 30       	cpi	r18, 0x08	; 8
 97a:	51 f1       	breq	.+84     	; 0x9d0 <__ultoa_invert+0x5c>
 97c:	20 31       	cpi	r18, 0x10	; 16
 97e:	81 f1       	breq	.+96     	; 0x9e0 <__ultoa_invert+0x6c>
 980:	e8 94       	clt
 982:	6f 93       	push	r22
 984:	6e 7f       	andi	r22, 0xFE	; 254
 986:	6e 5f       	subi	r22, 0xFE	; 254
 988:	7f 4f       	sbci	r23, 0xFF	; 255
 98a:	8f 4f       	sbci	r24, 0xFF	; 255
 98c:	9f 4f       	sbci	r25, 0xFF	; 255
 98e:	af 4f       	sbci	r26, 0xFF	; 255
 990:	b1 e0       	ldi	r27, 0x01	; 1
 992:	3e d0       	rcall	.+124    	; 0xa10 <__ultoa_invert+0x9c>
 994:	b4 e0       	ldi	r27, 0x04	; 4
 996:	3c d0       	rcall	.+120    	; 0xa10 <__ultoa_invert+0x9c>
 998:	67 0f       	add	r22, r23
 99a:	78 1f       	adc	r23, r24
 99c:	89 1f       	adc	r24, r25
 99e:	9a 1f       	adc	r25, r26
 9a0:	a1 1d       	adc	r26, r1
 9a2:	68 0f       	add	r22, r24
 9a4:	79 1f       	adc	r23, r25
 9a6:	8a 1f       	adc	r24, r26
 9a8:	91 1d       	adc	r25, r1
 9aa:	a1 1d       	adc	r26, r1
 9ac:	6a 0f       	add	r22, r26
 9ae:	71 1d       	adc	r23, r1
 9b0:	81 1d       	adc	r24, r1
 9b2:	91 1d       	adc	r25, r1
 9b4:	a1 1d       	adc	r26, r1
 9b6:	20 d0       	rcall	.+64     	; 0x9f8 <__ultoa_invert+0x84>
 9b8:	09 f4       	brne	.+2      	; 0x9bc <__ultoa_invert+0x48>
 9ba:	68 94       	set
 9bc:	3f 91       	pop	r19
 9be:	2a e0       	ldi	r18, 0x0A	; 10
 9c0:	26 9f       	mul	r18, r22
 9c2:	11 24       	eor	r1, r1
 9c4:	30 19       	sub	r19, r0
 9c6:	30 5d       	subi	r19, 0xD0	; 208
 9c8:	31 93       	st	Z+, r19
 9ca:	de f6       	brtc	.-74     	; 0x982 <__ultoa_invert+0xe>
 9cc:	cf 01       	movw	r24, r30
 9ce:	08 95       	ret
 9d0:	46 2f       	mov	r20, r22
 9d2:	47 70       	andi	r20, 0x07	; 7
 9d4:	40 5d       	subi	r20, 0xD0	; 208
 9d6:	41 93       	st	Z+, r20
 9d8:	b3 e0       	ldi	r27, 0x03	; 3
 9da:	0f d0       	rcall	.+30     	; 0x9fa <__ultoa_invert+0x86>
 9dc:	c9 f7       	brne	.-14     	; 0x9d0 <__ultoa_invert+0x5c>
 9de:	f6 cf       	rjmp	.-20     	; 0x9cc <__ultoa_invert+0x58>
 9e0:	46 2f       	mov	r20, r22
 9e2:	4f 70       	andi	r20, 0x0F	; 15
 9e4:	40 5d       	subi	r20, 0xD0	; 208
 9e6:	4a 33       	cpi	r20, 0x3A	; 58
 9e8:	18 f0       	brcs	.+6      	; 0x9f0 <__ultoa_invert+0x7c>
 9ea:	49 5d       	subi	r20, 0xD9	; 217
 9ec:	31 fd       	sbrc	r19, 1
 9ee:	40 52       	subi	r20, 0x20	; 32
 9f0:	41 93       	st	Z+, r20
 9f2:	02 d0       	rcall	.+4      	; 0x9f8 <__ultoa_invert+0x84>
 9f4:	a9 f7       	brne	.-22     	; 0x9e0 <__ultoa_invert+0x6c>
 9f6:	ea cf       	rjmp	.-44     	; 0x9cc <__ultoa_invert+0x58>
 9f8:	b4 e0       	ldi	r27, 0x04	; 4
 9fa:	a6 95       	lsr	r26
 9fc:	97 95       	ror	r25
 9fe:	87 95       	ror	r24
 a00:	77 95       	ror	r23
 a02:	67 95       	ror	r22
 a04:	ba 95       	dec	r27
 a06:	c9 f7       	brne	.-14     	; 0x9fa <__ultoa_invert+0x86>
 a08:	00 97       	sbiw	r24, 0x00	; 0
 a0a:	61 05       	cpc	r22, r1
 a0c:	71 05       	cpc	r23, r1
 a0e:	08 95       	ret
 a10:	9b 01       	movw	r18, r22
 a12:	ac 01       	movw	r20, r24
 a14:	0a 2e       	mov	r0, r26
 a16:	06 94       	lsr	r0
 a18:	57 95       	ror	r21
 a1a:	47 95       	ror	r20
 a1c:	37 95       	ror	r19
 a1e:	27 95       	ror	r18
 a20:	ba 95       	dec	r27
 a22:	c9 f7       	brne	.-14     	; 0xa16 <__ultoa_invert+0xa2>
 a24:	62 0f       	add	r22, r18
 a26:	73 1f       	adc	r23, r19
 a28:	84 1f       	adc	r24, r20
 a2a:	95 1f       	adc	r25, r21
 a2c:	a0 1d       	adc	r26, r0
 a2e:	08 95       	ret

00000a30 <__prologue_saves__>:
 a30:	2f 92       	push	r2
 a32:	3f 92       	push	r3
 a34:	4f 92       	push	r4
 a36:	5f 92       	push	r5
 a38:	6f 92       	push	r6
 a3a:	7f 92       	push	r7
 a3c:	8f 92       	push	r8
 a3e:	9f 92       	push	r9
 a40:	af 92       	push	r10
 a42:	bf 92       	push	r11
 a44:	cf 92       	push	r12
 a46:	df 92       	push	r13
 a48:	ef 92       	push	r14
 a4a:	ff 92       	push	r15
 a4c:	0f 93       	push	r16
 a4e:	1f 93       	push	r17
 a50:	cf 93       	push	r28
 a52:	df 93       	push	r29
 a54:	cd b7       	in	r28, 0x3d	; 61
 a56:	de b7       	in	r29, 0x3e	; 62
 a58:	ca 1b       	sub	r28, r26
 a5a:	db 0b       	sbc	r29, r27
 a5c:	0f b6       	in	r0, 0x3f	; 63
 a5e:	f8 94       	cli
 a60:	de bf       	out	0x3e, r29	; 62
 a62:	0f be       	out	0x3f, r0	; 63
 a64:	cd bf       	out	0x3d, r28	; 61
 a66:	09 94       	ijmp

00000a68 <__epilogue_restores__>:
 a68:	2a 88       	ldd	r2, Y+18	; 0x12
 a6a:	39 88       	ldd	r3, Y+17	; 0x11
 a6c:	48 88       	ldd	r4, Y+16	; 0x10
 a6e:	5f 84       	ldd	r5, Y+15	; 0x0f
 a70:	6e 84       	ldd	r6, Y+14	; 0x0e
 a72:	7d 84       	ldd	r7, Y+13	; 0x0d
 a74:	8c 84       	ldd	r8, Y+12	; 0x0c
 a76:	9b 84       	ldd	r9, Y+11	; 0x0b
 a78:	aa 84       	ldd	r10, Y+10	; 0x0a
 a7a:	b9 84       	ldd	r11, Y+9	; 0x09
 a7c:	c8 84       	ldd	r12, Y+8	; 0x08
 a7e:	df 80       	ldd	r13, Y+7	; 0x07
 a80:	ee 80       	ldd	r14, Y+6	; 0x06
 a82:	fd 80       	ldd	r15, Y+5	; 0x05
 a84:	0c 81       	ldd	r16, Y+4	; 0x04
 a86:	1b 81       	ldd	r17, Y+3	; 0x03
 a88:	aa 81       	ldd	r26, Y+2	; 0x02
 a8a:	b9 81       	ldd	r27, Y+1	; 0x01
 a8c:	ce 0f       	add	r28, r30
 a8e:	d1 1d       	adc	r29, r1
 a90:	0f b6       	in	r0, 0x3f	; 63
 a92:	f8 94       	cli
 a94:	de bf       	out	0x3e, r29	; 62
 a96:	0f be       	out	0x3f, r0	; 63
 a98:	cd bf       	out	0x3d, r28	; 61
 a9a:	ed 01       	movw	r28, r26
 a9c:	08 95       	ret

00000a9e <_exit>:
 a9e:	f8 94       	cli

00000aa0 <__stop_program>:
 aa0:	ff cf       	rjmp	.-2      	; 0xaa0 <__stop_program>
